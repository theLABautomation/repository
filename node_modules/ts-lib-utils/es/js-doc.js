import * as tslib_1 from "tslib";
/**
 * @public
 */
export function getJsDocs(node) {
    var e_1, _a, e_2, _b;
    var jsDocs = node.jsDoc;
    var result = [];
    if (jsDocs && jsDocs.length > 0) {
        try {
            for (var jsDocs_1 = tslib_1.__values(jsDocs), jsDocs_1_1 = jsDocs_1.next(); !jsDocs_1_1.done; jsDocs_1_1 = jsDocs_1.next()) {
                var jsDoc = jsDocs_1_1.value;
                if (jsDoc.tags) {
                    try {
                        for (var _c = (e_2 = void 0, tslib_1.__values(jsDoc.tags)), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var tag = _d.value;
                            result.push(getJsDocFromTag(tag));
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (jsDocs_1_1 && !jsDocs_1_1.done && (_a = jsDocs_1.return)) _a.call(jsDocs_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    return result;
}
function getJsDocFromTag(tag) {
    var type;
    var paramName;
    var optional;
    if (tag.tagName.text === 'param') {
        var typeExpression = tag.typeExpression;
        type = typeExpression.type;
        paramName = tag.name.text;
        optional = tag.isBracketed;
    }
    return {
        name: tag.tagName.text,
        type: type,
        paramName: paramName,
        comment: tag.comment,
        optional: optional
    };
}
