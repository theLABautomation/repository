import { KEYS } from './keys';
export interface Configuration {
    ip: string;
    mac: string;
    token?: string;
    appString?: string;
    tvAppString?: string;
    nameApp?: string;
    debug?: boolean;
    port?: number;
    saveToken?: boolean;
}
declare class Samsung {
    private IP;
    private MAC;
    private PORT;
    private APP_STRING;
    private TV_APP_STRING;
    private TOKEN;
    private NAME_APP;
    private LOGGER;
    private SAVE_TOKEN;
    private TOKEN_FILE;
    private WS_URL;
    constructor(config: Configuration);
    getToken(done: (token: string | null) => void): void;
    getTokenPromise(): Promise<string>;
    sendKey(key: KEYS, done?: (err?: any, res?: any) => void): void;
    sendKeyPromise(key: KEYS): Promise<unknown>;
    getAppsFromTV(done?: (err?: any, res?: any) => void): void;
    getAppsFromTVPromise(): Promise<any>;
    openApp(appId: string, done?: (err?: any, res?: any) => void): void;
    openAppPromise(appId: string): Promise<unknown>;
    isAvaliable(): Promise<string>;
    isAvaliablePing(): Promise<string>;
    turnOn(): Promise<string>;
    getLogs(): void;
    private _send;
    private _sendPromise;
    private _getCommandByKey;
    private _sendLegacyPromise;
    private _sendLegacy;
    private getLegacyCommand;
    private chr;
    private base64;
    private _saveTokenToFile;
}
export default Samsung;
